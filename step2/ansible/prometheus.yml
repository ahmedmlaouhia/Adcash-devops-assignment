# yaml-language-server: $schema=https://json.schemastore.org/ansible-playbook.json
- name: Provision Prometheus on Gandalf VM
  hosts: prometheus
  become: true
  collections:
    - community.docker
  pre_tasks:
    - name: Apply Prometheus defaults
      ansible.builtin.set_fact:
        monitoring_network: "{{ monitoring_network | default('monitoring') }}"
        prometheus_config_dir: "{{ prometheus_config_dir | default('/etc/prometheus') }}"
        prometheus_config_path: "{{ prometheus_config_path | default((prometheus_config_dir | default('/etc/prometheus')) ~ '/prometheus.yml') }}"
        prometheus_image: "{{ prometheus_image | default('prom/prometheus:v2.53.1') }}"
        prometheus_container_name: "{{ prometheus_container_name | default('prometheus') }}"
        grafana_container_name: "{{ grafana_container_name | default('grafana') }}"
        grafana_image: "{{ grafana_image | default('grafana/grafana:10.4.3') }}"
        grafana_host_port: "{{ grafana_host_port | default(3000) }}"
        grafana_admin_password: "{{ grafana_admin_password | default('adminpass') }}"
        grafana_provisioning_dir: "{{ grafana_provisioning_dir | default('/etc/grafana/provisioning') }}"
        grafana_datasource_file: "{{ grafana_datasource_file | default((grafana_provisioning_dir | default('/etc/grafana/provisioning')) ~ '/datasources/prometheus.yml') }}"

    - name: Validate Prometheus targets were provided
      ansible.builtin.assert:
        that:
          - prometheus_targets | length > 0
        fail_msg: >-
          Set `prometheus_targets` (host:port values) to point at the Gandalf metrics endpoint
          before running the playbook.

  tasks:
    - name: Install Docker
      ansible.builtin.apt:
        name:
          - docker.io
          - python3-docker
        state: present
        update_cache: true
        cache_valid_time: 3600

    - name: Ensure Docker service is enabled
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: true

    - name: Add ubuntu user to docker group
      ansible.builtin.user:
        name: ubuntu
        groups: docker
        append: true

    - name: Ensure monitoring network exists
      community.docker.docker_network:
        name: "{{ monitoring_network }}"

    - name: Create Prometheus config directory
      ansible.builtin.file:
        path: "{{ prometheus_config_dir }}"
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Deploy Prometheus scrape configuration
      ansible.builtin.template:
        src: templates/prometheus.yml.j2
        dest: "{{ prometheus_config_path }}"
        owner: root
        group: root
        mode: "0644"

    - name: Run Prometheus container
      community.docker.docker_container:
        name: "{{ prometheus_container_name }}"
        image: "{{ prometheus_image }}"
        restart_policy: unless-stopped
        ports:
          - "9090:9090"
        volumes:
          - "{{ prometheus_config_path }}:/etc/prometheus/prometheus.yml:ro"
        command:
          - "--config.file=/etc/prometheus/prometheus.yml"
          - "--storage.tsdb.path=/prometheus"
        networks:
          - name: "{{ monitoring_network }}"
        container_default_behavior: compatibility
        state: started

    - name: Ensure Grafana provisioning directories exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: "0755"
      loop:
        - "{{ grafana_provisioning_dir }}"
        - "{{ grafana_provisioning_dir }}/datasources"

    - name: Deploy Grafana Prometheus datasource definition
      ansible.builtin.template:
        src: templates/grafana-datasource.yml.j2
        dest: "{{ grafana_datasource_file }}"
        owner: root
        group: root
        mode: "0644"

    - name: Run Grafana container
      community.docker.docker_container:
        name: "{{ grafana_container_name }}"
        image: "{{ grafana_image }}"
        restart_policy: unless-stopped
        ports:
          - "{{ grafana_host_port }}:3000"
        env:
          GF_SECURITY_ADMIN_PASSWORD: "{{ grafana_admin_password }}"
          GF_USERS_ALLOW_SIGN_UP: "false"
          GF_PATHS_PROVISIONING: "/etc/grafana/provisioning"
        volumes:
          - "{{ grafana_provisioning_dir }}:/etc/grafana/provisioning:ro"
        networks:
          - name: "{{ monitoring_network }}"
        container_default_behavior: compatibility
        state: started
